#!/usr/bin/env perl
use 5.26.0;
use strict;
use FindBin;
use lib "$FindBin::RealBin/../perl5";
use Biotool::Getopt;
use Biotool::Logger;
use Biotool::Binaries;
use Data::Dumper;
use File::Temp;
use File::Basename;
use File::Path qw(make_path remove_tree);

sub run_cmd {
  my($cmd) = @_;
  $cmd = "LC_ALL=C $cmd";
  msg("Running: $cmd");
  system($cmd)==0 or err("[$!] could not run: $cmd");
}

sub read_lines {
  my($fname) = @_;
  open my $fh, '<', $fname or err("Can't read file: $fname");
  chomp(my @lines = <$fh>);
  close $fh;
  return @lines;
}

sub main {
  my $opt = Biotool::Getopt->getopt( 
  {
    name => 'kounta',
    version => '0.2.4',
    desc => 'Build a multi-genome k-mer count matrix',
    url => 'https://github.com/tseemann/kounta',
  },
  {
    out => { type=>'file', need=>1, desc=>"Output matrix file" },
    fofn => { type=>'file', desc=>"File of filenames to process" },
    kmer => { type=>'int', default=>25, need=>1, desc=>"k-mer length" },
    threads => { type=>'int', default=>1, need=>1, desc=>"Threads to use" },
    ram => { type=>'int', default=>4, need=>1, desc=>"RAM in gigabytes to use" },
    minfreq => { type=>'int', default=>3, need=>1, desc=>"Min k-mer frequency (FASTQ only)" },
    tempdir => { type=>'string', default=>'auto', desc=>"Fast working directory" },
    counts => { type=>'bool', default=>0, desc=>"Input files are counted and sorted kmer lists" }
#    binary => { type=>'', desc=>"Output binary presence/absence instead of counts" },
  });

  # if user provided a FOFN, add to ARGV list
  if ($$opt{fofn}) {
    my @fname = read_lines( $$opt{fofn} );
    push $opt->{ARGV}->@*, @fname;
  }

  for my $name (keys %$opt) {
    next if $name eq 'ARGV';
    my $value = $$opt{$name} // 'undefined';
    msg("Option: --$name = $value");
  }

  require_exe($_) for qw(sort join paste uniq wc grep parallel kmc kmc_tools pigz);
#  return if $opt->{check};

  system("sort --help | grep 'parallel=' > /dev/null")
    and err("Only GNU sort is supported, you probably have MacOS/BSD sort.");

  $$opt{ARGV} or err("Please provide some contig, read or count files");
  my @seqfile = $opt->{ARGV}->@*;
  map { -r $_ or err("Can't read input file '$_'") } @seqfile;

  # use system tempdir() unless user requests a folder
  my $dir = $$opt{tempdir};
  if (!$dir or $dir eq 'auto') {
    $dir = File::Temp->newdir();
  }
  else {
    make_path($dir);
  }
  msg("Temp folder:", $dir);
  
  my $sort = sprintf "sort --parallel %d --buffer-size %dG",
                     $$opt{threads}, $$opt{ram};
  
  my @prefix;
  for my $path (@seqfile) {
    my $file = basename($path);
    push @prefix, $file;
    unless ($$opt{counts}) {
      msg("Counting k-mers in $path");
      my $fmt = $file =~ m/\.f(ast)?q/ ? "-fq -ci".$$opt{minfreq} : "-fm -ci1";
      my $kmc = sprintf "kmc -cs65535 -m%d -sm -k%d -t%d $fmt $path $dir/$file $dir 1>/dev/null",
                  $$opt{ram}, $$opt{kmer}, $$opt{threads};
      run_cmd($kmc);
      
      msg("Sorting k-mers in $file");    
      # https://github.com/refresh-bio/KMC/issues/131
      # my $dump = "kmc_dump $dir/$file /dev/stdout | $sort -k1,1d > $dir/$file.kmers";
      my $dump = "kmc_tools transform $dir/$file dump -s $dir/$file.kmers";
      run_cmd($dump);
      unlink "$dir/$file.kmc_suf";
      unlink "$dir/$file.kmc_pre";
    }
    else {
      if ($file =~ m/\.gz/) {
        msg("Unzipping kmers");
        my $cmd = "pigz -p $$opt{threads} -dc $path > $dir/$file.kmers";
        run_cmd($cmd);
      } else {
        msg("Linking kmers");
        my $cmd = "ln -sr $path $dir/$file.kmers";
        run_cmd($cmd);
      }
    }
    
    run_cmd("head -n 5 $dir/$file.kmers");
  }

  my $nsamp = scalar(@prefix);
  msg("Find unique kmers from $nsamp files");
  # we perform an efficient merge sort rather than cat+sort
  my $uniq = "$sort -m --batch-size=$nsamp $dir/*.kmers | cut -f1 | uniq > $dir/uniqmers";
  run_cmd($uniq);
  run_cmd("head -n 10 $dir/uniqmers");

  msg("Joining uniqmers to sample k-mer counts");
  my @pin = map { "$dir/$_.kmers" } @prefix;
  my $pjoin = "parallel -j $$opt{threads} -v"
            . " \"join -o '1.1 2.2' -j 1 -a 1 -e 0 $dir/uniqmers {}" 
            . " | cut -d ' ' -f 2 > {.}.count\" ::: @pin";
  run_cmd($pjoin);

  # print header first
  msg("Writing header for output file:", $$opt{out});
  open my $OUT, '>', $$opt{out};
  print $OUT join("\t", '#KMER', @prefix)."\n";
  close $OUT;
  
  # append matrix
  msg("Combining $nsamp count files.");
  my @bits = map { "$dir/$_" } ('uniqmers', map { "$_.count" } @prefix);
  my $paste = "paste @bits >> ".$$opt{out};
  run_cmd($paste);

  # finish up
  run_cmd("wc -l $dir/*");  
  msg("Result in:", $$opt{out});
  msg("Done.");
  return 0;
}

exit main(@ARGV);

